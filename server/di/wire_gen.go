// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gsxhnd/owl/server/db"
	"github.com/gsxhnd/owl/server/handler"
	"github.com/gsxhnd/owl/server/middleware"
	"github.com/gsxhnd/owl/server/router"
	"github.com/gsxhnd/owl/server/service"
	"github.com/gsxhnd/owl/server/storage"
	"github.com/gsxhnd/owl/utils"
)

// Injectors from wire.go:

func InitApp() (*Application, error) {
	config, err := utils.NewConfig()
	if err != nil {
		return nil, err
	}
	logger := utils.NewLogger(config)
	middlewareMiddleware := middleware.NewMiddleware(logger)
	driver, err := db.NewDatabase(config, logger)
	if err != nil {
		return nil, err
	}
	storageStorage, err := storage.NewStorage(config, logger)
	if err != nil {
		return nil, err
	}
	pingService := service.NewPingService(logger, driver, storageStorage)
	pingHandler := handler.NewPingHandler(pingService)
	folderService := service.NewFolderService(logger, driver, storageStorage)
	validate := utils.NewValidator()
	folderHandler := handler.NewFolderHandler(folderService, validate, storageStorage, logger)
	fileService := service.NewFileService(logger, driver)
	fileHandler := handler.NewFileHandler(fileService, validate, logger)
	tagService := service.NewTagService(logger, driver)
	tagHandler := handler.NewTagHandler(tagService, validate, logger)
	fileTagService := service.NewFileTagService(logger, driver)
	fileTagHandler := handler.NewFileTagHandler(fileTagService, validate, logger)
	labelService := service.NewLabelService(logger, driver)
	labelHandler := handler.NewLabelHandler(labelService, validate, logger)
	imageHandler := handler.NewImageHandler(validate, storageStorage, logger)
	handlerHandler := handler.Handler{
		PingHandler:    pingHandler,
		FolderHandler:  folderHandler,
		FileHandler:    fileHandler,
		TagHandler:     tagHandler,
		FileTagHandler: fileTagHandler,
		LabelHandler:   labelHandler,
		ImageHandler:   imageHandler,
	}
	routerRouter, err := router.NewRouter(config, logger, middlewareMiddleware, handlerHandler)
	if err != nil {
		return nil, err
	}
	application := NewApplication(config, routerRouter)
	return application, nil
}
